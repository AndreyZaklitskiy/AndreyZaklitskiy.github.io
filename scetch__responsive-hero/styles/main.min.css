@charset "UTF-8";
/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
html{line-height:1.15;-webkit-text-size-adjust:100%}main{display:block}a,hr{padding:0}hr{box-sizing:content-box;overflow:visible;display:block;height:1px;border:0;border-top:1px solid #ccc;margin:1em 0}code,kbd,pre,samp{font:1em monospace,monospace}a{margin:0;font-size:100%;vertical-align:baseline;background:0 0;text-decoration:none;transition:.2s}abbr[title]{-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}sub,sup{line-height:0;position:relative}sub{bottom:-.25em}sup{top:-.5em}button,input,optgroup,select,textarea{font:100%/1.15 inherit;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}[hidden],template{display:none}abbr,address,article,aside,audio,b,blockquote,body,canvas,caption,cite,code,dd,del,details,dfn,div,dl,dt,em,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,ins,kbd,label,legend,li,mark,menu,nav,object,ol,p,pre,q,samp,section,small,span,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,ul,var,video{margin:0;padding:0;border:0;outline:0;font-size:100%;vertical-align:baseline;background:0 0}body{line-height:1;font-size:calc(16px + 46.5*(100vw - 320px)/3220)}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}ul{list-style:none}blockquote,q{quotes:none}blockquote:after,blockquote:before,q:after,q:before{content:none}a:focus{outline:0}ins,mark{background:#ff9;color:#000}ins{text-decoration:none}mark{font-style:italic;font-weight:700}del{text-decoration:line-through}abbr[title],dfn[title]{border-bottom:1px dotted;cursor:help}table{border-collapse:collapse;border-spacing:0}input,select{vertical-align:middle}button{transition:.2s;border:0}button:hover{cursor:pointer}button:focus{outline:0}::-webkit-input-placeholder{color:#000;opacity:.5}::-moz-placeholder{color:#000;opacity:.5}:-moz-placeholder{color:#000;opacity:.5}:-ms-input-placeholder{color:#000;opacity:.5}:focus::-webkit-input-placeholder{color:transparent!important}:focus::-moz-placeholder{color:transparent!important}:focus:-moz-placeholder{color:transparent!important}:focus:-ms-input-placeholder{color:transparent!important}@font-face{font-family:DelaGothicOneRegular;font-display:swap;src:url(../fonts/DelaGothicOneRegular.woff) format("woff"),url(../fonts/DelaGothicOneRegular.woff2) format("woff2");font-weight:900;font-style:normal}@font-face{font-family:PoppinsMedium;font-display:swap;src:url(../fonts/PoppinsMedium.woff) format("woff"),url(../fonts/PoppinsMedium.woff2) format("woff2");font-weight:400;font-style:normal}img{display:block;max-width:100%;height:auto}body.locked{overflow:hidden}.section-header{background:url(./../images/texture.png) no-repeat center/cover #141414;position:relative;max-width:100vw;font-family:"PoppinsMedium",sans-serif;overflow:hidden;z-index:1}.section-header::before{background:url(../images/main-img.png) no-repeat 0 0/contain;content:"";position:absolute;display:block;bottom:-1.696em;left:50%;transform:translateX(-50%);width:22.6em;height:15.9em;z-index:-1}.section-header:after{background:rgba(51,51,51,.7);content:"";position:absolute;top:0;left:0;width:100%;height:100%;z-index:-2}.container{min-height:100vh;display:flex;flex-direction:column;margin:0 auto}.container:before{background:url(./../images/rings.png) no-repeat 0 0/contain;content:"";position:absolute;display:block;width:9.44em;height:.416em;top:0;right:50%;transform:translateX(50%)}.header-logo{display:block;margin-left:auto;margin-right:auto;width:4.5em}.header-list,.header-navBar{display:flex;justify-content:space-between;align-items:center}.header-navBar{padding-top:1.5em;height:2em;padding-bottom:.5em;border-bottom:5px solid #ddfe25}.header-list{width:100%;height:100%}.header-list__item{position:relative;min-width:4.48em;height:100%}.header-list__item:before{background:#f6f6f6;content:"";position:absolute;display:block;width:100%;height:10px;left:0;transform:scaleX(0);bottom:calc(-.5em - 7px);transition:all .3s}.header-list__item:hover .header-list__link,.navBar-dropdown .header-list__item:hover .header-list__link{transition:all .3s;color:#ddfe25}.header-list__item:hover::before{display:block;transform:scaleX(1)}.header-list__link{display:block;height:100%;width:100%;line-height:2em;color:#f6f6f6;text-align:center}.navBar-dropdown{background:#141414;position:absolute;height:100%;width:100vw;top:-100%;left:0;scale:0;z-index:9;transition:all .8s}.navBar-dropdown.open{top:0;scale:1}.navBar-dropdown .header-list{flex-direction:column;justify-content:center;align-items:center;margin:auto 0}.navBar-dropdown .header-list__item{display:block;height:auto;width:100%}.navBar-dropdown .header-list__item:before,.navBar-dropdown .header-list__item:hover::before{display:none}.header-hamburger,.header-navBar__btn{background:0 0;font-size:calc(16px + 46.5*(100vw - 320px)/3220)}.header-navBar__btn{display:flex;justify-content:center;align-items:center;width:1.248em;height:100%;border:0}.header-navBar__btn .header-search-btn__img{width:.816em;height:.816em}.header-navBar__btn:hover{scale:1.05}.header-hamburger{height:1.152em;cursor:pointer;z-index:1000}.header-hamburger .hamburger-inner{background:#ddfe25;position:relative;display:block;width:1.248em;height:.128em;transition:all .3s}.header-hamburger .hamburger-inner:after,.header-hamburger .hamburger-inner:before{background:#ddfe25;content:"";position:absolute;display:block;left:0;width:100%;height:.128em}.header-hamburger .hamburger-inner:before{transition:all .5s;top:-.384em}.header-hamburger .hamburger-inner:after{transition:all .5s;bottom:-.384em}.header-hamburger:hover{scale:1.05}.header-hamburger.active{opacity:0}.header-hamburger.active .hamburger-inner{background:0 0}.header-hamburger.active .hamburger-inner:before{top:0;transform:rotate(-135deg)}.header-hamburger.active .hamburger-inner:after{transition:all .7s;bottom:0;transform:rotate(135deg)}.navBar-dropdown .header-hamburger{opacity:1;position:fixed;top:2em;right:2em}.main-title__wrapper{font:2.4em/1em "DelaGothicOneRegular",sans-serif;position:absolute;top:.3em;left:50%;transform:translateX(-50%);text-transform:uppercase;text-align:center}.main-title{color:#ddfe25;width:10.6em}.header-content{margin:auto 0;position:relative;padding-top:1.5em;z-index:1}.header-content__columns{display:flex;flex-wrap:wrap;justify-content:space-between;-moz-column-gap:40px;column-gap:40px}.header-content__column{display:flex;flex-direction:column;justify-content:center;align-items:center;padding:1.12em 0 2em;max-width:10.816em}.header-content__column_left{align-items:flex-start}.header-content__column_left .header-content__image{max-width:4.5em}.header-content__column_right{align-items:flex-end;text-align:right}.header-content__column_right .header-content__image{max-width:3.7em}.header-content__image{margin-bottom:2em}.header-content__title{margin-bottom:1em;font-size:1.3em;line-height:1.3em;color:#ddfe25}.header-content__text{margin-bottom:1em;font-size:.9em;line-height:1.24em;color:#f6f6f6}.header-content__link-btn{font:1em "PoppinsMedium",sans-serif;background:#ddfe25;margin-top:auto;min-width:7em;text-align:center;padding:.6em 1.2em;border-radius:1.5em;color:#141414}.header-content__link-btn:hover{scale:1.05;transition:all .3s;box-shadow:2px 2px 10px #141414}@media screen and (min-width:1449.98px){body{font-size:calc(26px + 36*(100vw - 1450px)/2000)}.container{max-width:100%;padding:0 2.88em}}@media screen and (max-width:1449.98px){.container{max-width:1370px;padding:0 40px}.header-navBar{border-bottom:3px solid #ddfe25;padding-bottom:.5em}.header-list__item::before{height:6px;bottom:calc(-.5em - 4px)}}@media screen and (max-width:1199.98px){.section-header::before{opacity:.7}.container{min-height:auto;padding:0 15px}}@media screen and (max-width:767.98px){body{font-size:16px}.header-logo{width:100px}.header-navBar{padding-bottom:1em;border-bottom:2px solid #ddfe25}.header-list__item::before{height:5px;bottom:calc(-1em - 3px)}.header-navBar__btn{font-size:24px}.header-hamburger{font-size:16px}}@media screen and (max-width:575.98px){.header-list__item{display:none}.main-title__wrapper{font-size:2em}.main-title{width:10.6em}}@media screen and (max-width:479.98px){.section-header::before{transform:translateX(-70%);opacity:.5}.header-content{flex:2 1 80%;display:flex;flex-direction:column;justify-content:space-around;height:100%}.main-title__wrapper{position:relative;top:0;text-align:center;margin-bottom:20px}.main-title{width:auto}.header-content__column{max-width:100%;padding:0 0 2em}.header-content__image{margin-bottom:2em}}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */